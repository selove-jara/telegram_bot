package org.example.service;

import org.example.model.Product;
import org.example.repository.ProductRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.File;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import java.util.Random;
import java.util.stream.Collectors;

@Component
public class ProductPublisherBot extends TelegramLongPollingBot {

    private static final String BOT_TOKEN = "7807555157:AAGyXDruNDICaJYp2aG69uUfEfWoYpXrzx8";
    private static final String CHANNEL_ID = "@skidki_Ozon_Wildberries_sale";
    // private static final String CHANNEL_ID = "@public_products";
    private int currentHashtagIndex = 0;
    private final List<String> hashtags = Arrays.asList(
            "#–≤—ã–≥–æ–¥–Ω–æ", "#–∞–∫—Ü–∏—è",
            "#–ø—Ä–æ–º–æ–∫–æ–¥—ã", "#—Å–∫–∏–¥–∫–∏", "#—Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞",
            "#–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã", "#—ç–∫–æ–Ω–æ–º–∏—è"
    );

    @Autowired
    private ProductRepository productRepository;

    @Override
    public void onUpdateReceived(Update update) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    }

    @Override
    public String getBotUsername() {
        return "YourBotName";
    }

    @Override
    public String getBotToken() {
        return BOT_TOKEN;
    }

    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞–∂–¥—ã–µ 15 –º–∏–Ω—É—Ç.
     */
    @Scheduled(fixedDelay = 900000) // 15 –º–∏–Ω—É—Ç = 900 000 –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥
    public void publishProducts() {
        // –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –±—ã–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã
        List<Product> unpublishedProducts = productRepository.findByPostedFalse();

        if (!unpublishedProducts.isEmpty()) {
            // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞
            Collections.shuffle(unpublishedProducts);

            Product product = unpublishedProducts.get(0);

            // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —á–∞—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è Markdown-—Ä–∞–∑–º–µ—Ç–∫–æ–π
            String escapedName = escapeMarkdownV2(product.getName());
            String escapedProductPrice = escapeMarkdownV2(String.valueOf(product.getProduct()));
            String escapedBasicPrice = escapeMarkdownV2(String.valueOf(product.getBasic()));

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
            String message = String.format(
                    "‚ú® *%s* ‚ú®\n\n" + // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞
                            "ü§ë –¶–µ–Ω–∞: ~%s~ ‚ÇΩ \\- %s ‚ÇΩ \n\n" + // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–µ—Ñ–∏—Å
                            "üëâ [–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä](https://www.wildberries.ru/catalog/%d/detail.aspx) \n" +
                            "\n%s",
                    escapedName, // –£–∂–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ
                    escapedBasicPrice, // –£–∂–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ
                    escapedProductPrice, // –£–∂–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ
                    product.getId(),
                    getNextHashtag()
            );


            try {
                if (product.getImagePath() != null && !product.getImagePath().isEmpty()) {
                    // –ï—Å–ª–∏ –µ—Å—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
                    sendPhotoWithCaption(product, message);
                } else {
                    // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                    sendTextMessage(message);
                }

                // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ posted –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                product.setPosted(true);
                productRepository.save(product);
                System.out.println("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: " + product.getName());
            } catch (Exception e) {
                System.out.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞: " + product.getName());
                e.printStackTrace();
            }
        } else {
            System.out.println("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.");
        }
    }

    private void sendTextMessage(String message) throws TelegramApiException {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(CHANNEL_ID);
        sendMessage.setText(message);
        sendMessage.setParseMode("MarkdownV2"); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º parse_mode –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        execute(sendMessage);
    }

    private void sendPhotoWithCaption(Product product, String caption) throws TelegramApiException {
        File imageFile = new File(product.getImagePath());
        if (!imageFile.exists()) {
            throw new RuntimeException("–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: " + product.getImagePath());
        }

        InputFile photo = new InputFile(imageFile);
        SendPhoto sendPhoto = new SendPhoto();
        sendPhoto.setChatId(CHANNEL_ID);
        sendPhoto.setPhoto(photo);
        sendPhoto.setCaption(caption);
        sendPhoto.setParseMode("MarkdownV2");
        execute(sendPhoto);
    }

    /**
     * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã MarkdownV2 –≤ —Ç–µ–∫—Å—Ç–µ.
     */
    private String escapeMarkdownV2(String text) {
        return text.replace("_", "\\_")
                .replace("*", "\\*")
                .replace("[", "\\[")
                .replace("]", "\\]")
                .replace("(", "\\(")
                .replace(")", "\\)")
                .replace("~", "\\~")
                .replace("`", "\\`")
                .replace(">", "\\>")
                .replace("#", "\\#")
                .replace("+", "\\+")
                .replace("-", "\\-")
                .replace("=", "\\=")
                .replace("|", "\\|")
                .replace("{", "\\{")
                .replace("}", "\\}")
                .replace(".", "\\.")
                .replace("!", "\\!");
    }

    private String getNextHashtag() {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π —Ö—ç—à—Ç–µ–≥
        String hashtag = hashtags.get(currentHashtagIndex);

        // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –ø–µ—Ä–µ–¥ —Ö—ç—à—Ç–µ–≥–æ–º
        String formattedHashtag = String.format(
                "[–ú–∏—Ä —Å–∫–∏–¥–æ–∫](https://t.me/+DJHQEb0s6D9kZjYy) %s",
                hashtag.replace("#", "\\#") // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Å–∏–º–≤–æ–ª '#'
        );

        // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ö—ç—à—Ç–µ–≥—É
        currentHashtagIndex = (currentHashtagIndex + 1) % hashtags.size();

        return formattedHashtag;
    }
}