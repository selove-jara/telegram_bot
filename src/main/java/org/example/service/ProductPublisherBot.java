package org.example.service;

import jakarta.annotation.PostConstruct;
import org.example.model.Product;
import org.example.repository.ProductRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.bots.TelegramLongPollingBot;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.send.SendPhoto;
import org.telegram.telegrambots.meta.api.objects.InputFile;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

import java.io.File;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;

@Component
public class ProductPublisherBot extends TelegramLongPollingBot {

    private static final String BOT_TOKEN = "7807555157:AAGyXDruNDICaJYp2aG69uUfEfWoYpXrzx8";
    private static final String CHANNEL_ID = "@skidki_Ozon_Wildberries_sale";
    private int currentHashtagIndex = 0;
    private final List<String> hashtags = Arrays.asList(
            "#–≤—ã–≥–æ–¥–Ω–æ", "#–∞–∫—Ü–∏—è",
            "#–ø—Ä–æ–º–æ–∫–æ–¥—ã", "#—Å–∫–∏–¥–∫–∏", "#—Ä–∞—Å–ø—Ä–æ–¥–∞–∂–∞",
            "#–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å—ã", "#—ç–∫–æ–Ω–æ–º–∏—è", "#wb", "#–º–æ–¥–∞",
            "#wilbberies", "#ozon", "#–ø–æ–∫—É–ø–∫–∏", "#—à–æ–ø–∏–Ω–≥", "#–Ω–æ–≤–∏–Ω–∫–∞", "#sale",
            "#–ø–æ–∫—É–ø–∫–∏–æ–Ω–ª–∞–π–Ω", "#–ø—Ä–æ–º–æ", "#–ø–æ–∫—É–ø–∫–∏–æ–Ω–ª–∞–π–Ω", "#–≥–æ—Ä—è—á–∏–µ—Å–∫–∏–¥–∫–∏", "#—Å–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", "#—à–æ–ø–∏–Ω–≥–æ–Ω–ª–∞–π–Ω",
            "#–¥–µ—à–µ–≤–ª–µ–Ω–µ–∫—É–¥–∞", "#–ª—É—á—à–∏–µ—Ü–µ–Ω—ã", "#wildberries—Å–∫–∏–¥–∫–∏", "#ozon–≤—ã–≥–æ–¥–∞", "#—Å–æ–≤–µ—Ç—ã–ø–æ–∫—É–ø–∫–∏", "#–∫–∞–∫—Å—ç–∫–æ–Ω–æ–º–∏—Ç—å",
            "#–ø–æ–ª–µ–∑–Ω—ã–µ—Å–æ–≤–µ—Ç—ã", "#–º–æ–¥–Ω—ã–µ–ø–æ–∫—É–ø–∫–∏", "#—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏", "#–≥–æ—Ä—è—á–∏–µ—Å–∫–∏–¥–∫–∏", "#—Å–ø–µ—Ü–ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è", "#—à–æ–ø–∏–Ω–≥–æ–Ω–ª–∞–π–Ω"
    );

    private ProductRepository productRepository;

    private ImageDownloader imageDownloader;

    private ProductService productService;

    @Autowired
    public ProductPublisherBot(ImageDownloader imageDownloader, ProductService productService, ProductRepository productRepository) {
        this.imageDownloader = imageDownloader;
        this.productService = productService;
        this.productRepository = productRepository;
    }



    @Override
    public void onUpdateReceived(Update update) {
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    }

    @Override
    public String getBotUsername() {
        return "YourBotName";
    }

    @Override
    public String getBotToken() {
        return BOT_TOKEN;
    }

    /**
     * –ú–µ—Ç–æ–¥ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–æ–≤ –∫–∞–∂–¥—ã–µ 10 –º–∏–Ω—É—Ç —Å 6:00 –ø–æ 23:59.
     */
    @Scheduled(cron = "0 0/10 6-23 * * *", zone = "Europe/Moscow")
    public void publishProducts() {
        // –ù–∞–π—Ç–∏ —Ç–æ–≤–∞—Ä—ã, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –±—ã–ª–∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã
        List<Product> unpublishedProducts = productRepository.findByPostedFalse();

        if (!unpublishedProducts.isEmpty()) {
            // –ü–µ—Ä–µ–º–µ—à–∏–≤–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
            Collections.shuffle(unpublishedProducts);

            // –ë–µ—Ä–µ–º –ø–µ—Ä–≤—ã–π —Ç–æ–≤–∞—Ä –∏–∑ —Å–ø–∏—Å–∫–∞
            Product product = unpublishedProducts.get(0);

            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–∞ –Ω–µ –º–µ–Ω—å—à–µ 3 –∏ —Ü–µ–Ω–∞ –Ω–µ —Ä–∞–≤–Ω–∞ 0
            if (product.getTotalQuantity() >= 3 && product.getProduct() > 0) {
                // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ —á–∞—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è Markdown-—Ä–∞–∑–º–µ—Ç–∫–æ–π
                String escapedName = escapeMarkdownV2(product.getName());
                String escapedProductPrice = escapeMarkdownV2(String.valueOf(product.getProduct()));
                String escapedBasicPrice = escapeMarkdownV2(String.valueOf(product.getBasic()));

                // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                String message = String.format(
                        "‚ú® *%s* ‚ú®\n\n" + // –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è —Ä–∞–∑–º–µ—Ç–∫–∞
                                "ü§ë –¶–µ–Ω–∞: ~%s~ ‚ÇΩ \\- %s ‚ÇΩ \n\n" + // –≠–∫—Ä–∞–Ω–∏—Ä—É–µ–º –¥–µ—Ñ–∏—Å
                                "üëâ [–°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä](https://www.wildberries.ru/catalog/%d/detail.aspx) \n" +
                                "\n%s",
                        escapedName, // –£–∂–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ
                        escapedBasicPrice, // –£–∂–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ
                        escapedProductPrice, // –£–∂–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ
                        product.getId(),
                        getNextHashtags()
                );

                try {
                    // –°–∫–∞—á–∏–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π
                    String imagePath = imageDownloader.downloadImage(product.getId());

                    if (imagePath != null) {
                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –æ–ø–∏—Å–∞–Ω–∏–µ–º
                        sendPhotoWithCaption(imagePath, message);
                        new File(imagePath).delete();
                    } else {
                        // –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–∫–∞—á–∞—Ç—å, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                        sendTextMessage(message);
                    }

                    // –û–±–Ω–æ–≤–ª—è–µ–º —Ñ–ª–∞–≥ posted –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
                    product.setPosted(true);
                    productService.save(product);
                    System.out.println("–¢–æ–≤–∞—Ä —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω: " + product.getName());
                } catch (Exception e) {
                    System.out.println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Ç–æ–≤–∞—Ä–∞: " + product.getName());
                    e.printStackTrace();
                }
            } else {
                System.out.println("–¢–æ–≤–∞—Ä –Ω–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω, —Ç–∞–∫ –∫–∞–∫ –µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ–Ω—å—à–µ 3 –∏–ª–∏ —Ü–µ–Ω–∞ —Ä–∞–≤–Ω–∞ 0: " + product.getName());
            }
        } else {
            System.out.println("–ù–µ—Ç —Ç–æ–≤–∞—Ä–æ–≤ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.");
        }
    }

    private void sendTextMessage(String message) throws TelegramApiException {
        SendMessage sendMessage = new SendMessage();
        sendMessage.setChatId(CHANNEL_ID);
        sendMessage.setText(message);
        sendMessage.setParseMode("MarkdownV2"); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º parse_mode –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
        execute(sendMessage);
    }

    private void sendPhotoWithCaption(String imagePath, String caption) throws TelegramApiException {
        File imageFile = new File(imagePath);
        if (!imageFile.exists()) {
            throw new RuntimeException("–§–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω: " + imagePath);
        }

        InputFile photo = new InputFile(imageFile);
        SendPhoto sendPhoto = new SendPhoto();
        sendPhoto.setChatId(CHANNEL_ID);
        sendPhoto.setPhoto(photo);
        sendPhoto.setCaption(caption);
        sendPhoto.setParseMode("MarkdownV2");
        execute(sendPhoto);
    }

    /**
     * –≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã MarkdownV2 –≤ —Ç–µ–∫—Å—Ç–µ.
     */
    private String escapeMarkdownV2(String text) {
        return text.replace("_", "\\_")
                .replace("*", "\\*")
                .replace("[", "\\[")
                .replace("]", "\\]")
                .replace("(", "\\(")
                .replace(")", "\\)")
                .replace("~", "\\~")
                .replace("`", "\\`")
                .replace(">", "\\>")
                .replace("#", "\\#")
                .replace("+", "\\+")
                .replace("-", "\\-")
                .replace("=", "\\=")
                .replace("|", "\\|")
                .replace("{", "\\{")
                .replace("}", "\\}")
                .replace(".", "\\.")
                .replace("!", "\\!");
    }

    private String getNextHashtags() {
        StringBuilder hashtagsBuilder = new StringBuilder();
        hashtagsBuilder.append("üî• [–ú–∏—Ä —Å–∫–∏–¥–æ–∫](https://t.me/+DJHQEb0s6D9kZjYy) "); // –î–æ–±–∞–≤–ª—è–µ–º —Å—Å—ã–ª–∫—É –æ–¥–∏–Ω —Ä–∞–∑
        Collections.shuffle(hashtags);
        for (int i = 0; i < 3; i++) {
            String hashtag = hashtags.get(currentHashtagIndex);
            hashtagsBuilder.append(hashtag.replace("#", "\\#")).append(" "); // –î–æ–±–∞–≤–ª—è–µ–º —Ö—ç—à—Ç–µ–≥

            // –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ö—ç—à—Ç–µ–≥—É
            currentHashtagIndex = (currentHashtagIndex + 1) % hashtags.size();
        }

        return hashtagsBuilder.toString().trim(); // –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–π –ø—Ä–æ–±–µ–ª –≤ –∫–æ–Ω—Ü–µ
    }

    @Scheduled(fixedDelay = 86400000) // –û—á–∏—Å—Ç–∫–∞ —Ä–∞–∑ –≤ —Å—É—Ç–∫–∏
    public void cleanTempImages() {
        File imagesDir = new File("/tmp/images");
        if (imagesDir.exists()) {
            for (File file : imagesDir.listFiles()) {
                if (file.isFile() && System.currentTimeMillis() - file.lastModified() > 86400000) {
                    file.delete(); // –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª—ã —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤
                }
            }
        }
    }

    @PostConstruct
    private void initializeImagesDirectory() {
        File imagesDir = new File("/tmp/images");
        if (!imagesDir.exists()) {
            imagesDir.mkdirs(); // –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        }
    }
}